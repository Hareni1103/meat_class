# -*- coding: utf-8 -*-
"""meat_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlU88OoYyw6ocDJ-RKxan-lzszm-PCPX
"""

import streamlit as st
import pandas as pd
from sentence_transformers import SentenceTransformer, util
from io import BytesIO

# Set Streamlit page
st.set_page_config(page_title="Meat Product Classifier", layout="wide")
st.title("ðŸ¥© Meat Product Classifier with ML")
st.write("Upload your Training File, Input File, and Rules File.")

# Upload training, input, and rules files
train_file = st.file_uploader("Upload Training File (with 100% accurate predictions)", type=["xlsx"])
input_file = st.file_uploader("Upload Input File (to predict)", type=["xlsx"])
rules_file = st.file_uploader("Upload Rules File (for exclusions)", type=["xlsx"])

# Process after all files are uploaded
if train_file and input_file and rules_file:
    # Read files
    train_df = pd.read_excel(train_file)
    input_df = pd.read_excel(input_file)
    rules_df = pd.read_excel(rules_file)

    # Strip spaces from column names
    train_df.columns = train_df.columns.str.strip()
    input_df.columns = input_df.columns.str.strip()
    rules_df.columns = rules_df.columns.str.strip()

    # Display columns (optional for checking)
    # st.write("Training Columns:", train_df.columns.tolist())
    # st.write("Input Columns:", input_df.columns.tolist())
    # st.write("Rules Columns:", rules_df.columns.tolist())

    # Preprocessing: make everything UPPERCASE
    train_df['Best Received External Description'] = train_df['Best Received External Description'].astype(str).str.upper()
    train_df['Consolidated nan descript'] = train_df['Consolidated nan descript'].astype(str).str.upper()
    input_df['Best Received External Description'] = input_df['Best Received External Description'].astype(str).str.upper()
    rules_df['Exclude Retailer description'] = rules_df['Exclude Retailer description'].astype(str).str.upper()
    rules_df['Consolidated nan descript'] = rules_df['Consolidated nan descript'].astype(str).str.upper()

    # Filter only LAC rows
    input_df = input_df[input_df['Code Type'] == 'LAC'].copy()

    # Load Sentence Transformer Model
    st.write("Loading Semantic Model...")
    model = SentenceTransformer('all-MiniLM-L6-v2')

    # Encode training data
    st.write("Training Model from uploaded data...")
    train_sentences = train_df['Best Received External Description'].tolist()
    train_labels = train_df['Consolidated nan descript'].tolist()
    train_embeddings = model.encode(train_sentences, convert_to_tensor=True)

    # Prepare Exclude Keywords
    exclude_keywords = rules_df[rules_df['Consolidated nan descript'] == 'EXCLUDE']['Exclude Retailer description'].dropna().tolist()

    # Predict
    st.write("Predicting on Input Data...")
    predictions = []
    confidences = []

    for desc in input_df['Best Received External Description']:
        # First, Exclusion Check
        if any(keyword in desc for keyword in exclude_keywords):
            predictions.append('Exclude')
            confidences.append(1.0)  # 100% confident on exclusion
            continue

        # Semantic Matching
        query_embedding = model.encode(desc, convert_to_tensor=True)
        cosine_scores = util.cos_sim(query_embedding, train_embeddings)[0]
        top_score_idx = cosine_scores.argmax().item()
        top_score = cosine_scores[top_score_idx].item()

        # Save prediction and confidence
        predictions.append(train_labels[top_score_idx])
        confidences.append(top_score)

    # Add predictions to input dataframe
    input_df['Predicted Consolidated nan descript'] = predictions
    input_df['Prediction Accuracy'] = [round(score * 100, 2) for score in confidences]

    # Show output
    st.subheader("ðŸ”Ž Predicted Results:")
    st.dataframe(input_df[['Best Received External Description', 'Predicted Consolidated nan descript', 'Prediction Accuracy']])

    # Download
    output = BytesIO()
    input_df.to_excel(output, index=False, engine='openpyxl')
    output.seek(0)

    st.download_button(
        label="ðŸ“¥ Download Predictions as Excel",
        data=output,
        file_name="meat_predictions.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )